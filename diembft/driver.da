
from doctest import OutputChecker
from email import message
import sys

# config import
from config.config import configs_four_node,configs_seven_node

from random import randrange

#repolica dependencies
from diembft.mem_pool.memPoolHelper import MemPoolHelper
from diembft.application.application import Application
from diembft.messages import voteMsg
from diembft.pacemaker.pacemaker import Pacemaker
from diembft.utilities.generateKeys import GenerateKeys
from diembft.messages.proposalMsg import ProposalMsg
from diembft.messages.timeOutMessage import TimeOutMessage
from diembft.messages.voteMsg import VoteMsg
from diembft.mem_pool.message import Message

#client dependencies
from diembft.block_tree.client_request import ClientRequest

import traceback
import random
import uuid

class Client(process):
    def setup(node_id:str, replica_nodes:set, signature:str, byzentine: int):
        self.node_id = node_id
        self.replica_nodes = replica_nodes
        self.count = 0
        self.byzentine_nodes = byzentine
        self.transactions = ["Add","Subtract","Delete","Query"]

    def run():
        message = self.create_requests()

        send(('client_message', message), to=self.replica_nodes)

        while(self.count <= self.byzentine_nodes):
            pass

        output('Client: Request is executed')

        self.count = 0

        message1 = self.create_requests()

        send(('client_message', message1), to=self.replica_nodes)

        while(self.count <= self.byzentine_nodes):
            pass

        output('Client: Request is executed')


        self.count = 0
        message2 = self.create_requests()

        send(('client_message', message2), to=self.replica_nodes)

        while(self.count <= self.byzentine_nodes):
            pass

        output('Client: Request is executed')

        #show have a await statement here


    def create_requests():
        client_request  = ClientRequest(
            self.node_id,
            str(uuid.uuid4())
        )
        return Message(
            self.transactions[randrange(0,4)],
            'signature',
            client_request
        )

    def receive(msg=('response_message', vote_msg), from_=replica_leader_node):
        output( 'Client Me ',vote_msg.ledger_commit_info.client_request.client_id)
        self.count += 1


class Replica(process):

    def setup(nodes: set, node_id: str, mapper:dict, keys: list, nodes_mapper: dict(), byzentine_nodes: int = 2):

        self.mapper = mapper
        self.nodes = nodes
        self.node_id = node_id
        self.mem_pool = MemPoolHelper()
        self.main = Application(
            self.mapper,
            list(nodes_mapper.keys()),
            self.node_id,
            keys,
            # TODO: Take it from client later
            1,
            self.mem_pool,
            byzentine_nodes
        )
        self.round_done = False
        self.nodes_mapper = nodes_mapper
        self.round = 0


    def run():

        try:
            if self.main.leader_election.get_leader(self.main.pacemaker.current_round) == self.node_id:
                self.main.pacemaker.current_round += 1
            proposal_msg = self.main.process_new_round_event(None)

            if proposal_msg:
                self.main.pacemaker.current_round = 1
                send(('message', proposal_msg), to = self.nodes)
        except Exception as e:
            traceback.print_exc()
            return

        local_timeout()


    def local_timeout():

        run_done = False

        while not run_done:

            self.round_done = False

            timer_duration = self.main.pacemaker.get_round_timer()

            if await(self.round_done):
                pass

            elif timeout(timer_duration):
                timeout_msg = self.main.pacemaker.local_timeout_round()
                # broadcast to all the nodes
                send(('message', timeout_msg), to = self.nodes)


    def receive(msg=('client_message', client_message), from_=client_node):
        #TODO: Encrypt and decrypt messages
        output('Adding message to mempool', client_message)
        self.mem_pool.put_message(client_message)

    def receive(msg=('message',message), from_=node):

        try:

            if type(message) == ProposalMsg:

                vote_msg,leader = self.main.process_proposal_msg(message)

                self.round_done=True

                if vote_msg is not None:

                    # send vote_msg to next leader
                    leader = self.nodes_mapper[leader]
                    send(('message',vote_msg), to=leader)
                    # send response back to client
                    client = self.nodes_mapper[vote_msg.ledger_commit_info.client_request.client_id]
                    send(('response_message', vote_msg), to=client)

            elif type(message) == VoteMsg:

                proposal_msg = self.main.process_vote_msg(message)

                if proposal_msg is not None:

                    send(('message',proposal_msg), to=nodes)

            elif type(message) == TimeOutMessage:
                output('Pacemaker round ', self.main.pacemaker.current_round)
                msg = self.main.process_timeout_msg(message)
                if msg is None:
                    return

                send(('message',msg), to=self.nodes)

        except Exception as e:
            traceback.print_exc()

def main():

    output('Main Here starting')
    config(channel='reliable', clock = "lamport")
    output(configs_four_node)

    config = configs_seven_node

    nodes_count = config['num_replicas']
    client_count = config['num_clients']
    byzentine_nodes = config['num_byzentine_nodes']
    timer_constant = config['timer_constant']

    output(byzentine_nodes, nodes_count)

    config(channel='reliable', clock = "lamport")

    replicas = new(Replica, num = nodes_count)

    node_to_public_key_mapper, node_to_key_mapper = dict(), dict()

    nodes_mapper = dict()

    for i,r in enumerate(replicas):

        node_id = get_node_key_formatter(i)
        nodes_mapper[node_id] = r

    clients = new(Client, num=client_count)

    for i,c in enumerate(clients):
        client_id = get_client_identifier(i)
        nodes_mapper[client_id] = c
        setup(c, (client_id, replicas , '',byzentine_nodes))

    for i,r in enumerate(replicas):
        generate_keys = GenerateKeys()
        private_key, public_key = generate_keys.generate_key()
        node_to_public_key_mapper[get_node_key_formatter(i)] = public_key
        node_to_key_mapper[get_node_key_formatter(i)] = [private_key, public_key]

    for i,r in enumerate(replicas):

        node_id = get_node_key_formatter(i)

        setup(r, (replicas, node_id, node_to_public_key_mapper, node_to_key_mapper[node_id], nodes_mapper, byzentine_nodes))

    start(clients)
    start(replicas)

def get_client_identifier(id: int):
    return 'client_id_' + str(id)

def get_node_key_formatter(id: int):

    return 'node_id_' + str(id)